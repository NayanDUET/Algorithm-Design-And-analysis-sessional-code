#include<bits/stdc++.h>
using namespace std;

int knapsack(int capacity, vector<int> &weight, vector<int> &profit, int n, vector<int> &includedItems) {
    vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0));

    // Fill dp table
    for (int i = 1; i <= n; i++) {
        for (int w = 0; w <= capacity; w++) {
            if (weight[i - 1] <= w) {
                dp[i][w] = max(dp[i - 1][w], profit[i - 1] + dp[i - 1][w - weight[i - 1]]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    // Backtrack to find the included items
    int w = capacity;
    for (int i = n; i > 0 && w > 0; i--) {
        if (dp[i][w] != dp[i - 1][w]) { // Item i-1 is included
            includedItems.push_back(i - 1); // Store the index of the included item
            w -= weight[i - 1];
        }
    }

    return dp[n][capacity];
}

int main() {
    cout << "Enter number of items: ";
    int n;
    cin >> n;

    cout << "Enter the number of capacity: ";
    int capacity;
    cin >> capacity;

    cout << "Enter weights: ";
    vector<int> weight(n);
    vector<int> profits(n);

    for (int i = 0; i < n; i++) {
        cin >> weight[i];
    }

    cout << "Enter values: ";
    for (int i = 0; i < n; i++) {
        cin >> profits[i];
    }

    vector<int> includedItems;
    int mxProfit = knapsack(capacity, weight, profits, n, includedItems);

    cout << "Max profit is: " << mxProfit << endl;

    cout << "Items included (0-based index): ";
    for (int item : includedItems) {
        cout << item << " ";
    }
    cout << endl;

    return 0;
}
